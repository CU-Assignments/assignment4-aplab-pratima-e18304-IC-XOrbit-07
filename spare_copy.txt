#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cctype>

using namespace std;

string longestNiceSubstring(string s) {
    for (int length = s.length(); length > 0; --length) {
        for (int start = 0; start <= s.length() - length; ++start) {
            string substring = s.substr(start, length);
            bool isNice = true;
            for (char c : substring) {
                if (!(find(substring.begin(), substring.end(), toupper(c)) != substring.end() &&
                      find(substring.begin(), substring.end(), tolower(c)) != substring.end())) {
                    isNice = false;
                    break;
                }
            }
            if (isNice) return substring;
        }
    }
    return "";
}

unsigned int reverseBits(unsigned int n) {
    unsigned int result = 0;
    for (int i = 0; i < 32; ++i) {
        result = (result << 1) | (n & 1);
        n >>= 1;
    }
    return result;
}

int hammingWeight(uint32_t n) {
    int count = 0;
    while (n) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}

int maxSubArray(vector<int>& nums) {
    int max_sum = nums[0], current_sum = nums[0];
    for (int i = 1; i < nums.size(); ++i) {
        current_sum = max(nums[i], current_sum + nums[i]);
        max_sum = max(max_sum, current_sum);
    }
    return max_sum;
}

bool searchMatrix(vector<vector<int>>& matrix, int target) {
    if (matrix.empty()) return false;
    int row = matrix.size() - 1, col = 0;
    while (row >= 0 && col < matrix[0].size()) {
        if (matrix[row][col] == target) return true;
        else if (matrix[row][col] > target) row--;
        else col++;
    }
    return false;
}

int superPow(int a, vector<int>& b) {
    const int MOD = 1337;
    int result = 1;
    a %= MOD;
    for (int i = b.size() - 1; i >= 0; --i) {
        result = (result * pow(a, b[i], MOD)) % MOD;
        a = pow(a, 10, MOD);
    }
    return result;
}

vector<int> beautifulArray(int n) {
    vector<int> result = {1};
    while (result.size() < n) {
        vector<int> temp;
        for (int num : result) {
            temp.push_back(num * 2 - 1);
            temp.push_back(num * 2);
        }
        result.clear();
        for (int num : temp) {
            if (num <= n) result.push_back(num);
        }
    }
    return result;
}

vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
    vector<pair<int, int>> events;
    for (auto& building : buildings) {
        events.push_back({building[0], -building[2]});
        events.push_back({building[1], building[2]});
    }

    sort(events.begin(), events.end());

    vector<vector<int>> result;
    multiset<int> heights = {0};
    int prev_max_height = 0;
    for (auto& event : events) {
        if (event.second < 0) heights.insert(-event.second);
        else heights.erase(heights.find(event.second));

        int max_height = *heights.rbegin();
        if (max_height != prev_max_height) {
            result.push_back({event.first, max_height});
            prev_max_height = max_height;
        }
    }

    return result;
}

int reversePairs(vector<int>& nums) {
    function<int(vector<int>&, int, int)> mergeSort = [&](vector<int>& nums, int start, int end) {
        if (start >= end) return 0;
        int mid = start + (end - start) / 2;
        int count = mergeSort(nums, start, mid) + mergeSort(nums, mid + 1, end);

        vector<int> temp;
        int j = mid + 1;
        for (int i = start; i <= mid; ++i) {
            while (j <= end && nums[i] > 2LL * nums[j]) ++j;
            count += j - (mid + 1);
        }

        int left = start, right = mid + 1;
        while (left <= mid || right <= end) {
            if (right > end || (left <= mid && nums[left] <= nums[right])) temp.push_back(nums[left++]);
            else temp.push_back(nums[right++]);
        }
        copy(temp.begin(), temp.end(), nums.begin() + start);
        return count;
    };

    return mergeSort(nums, 0, nums.size() - 1);
}

int lengthOfLIS(vector<int>& nums) {
    vector<int> sub;
    for (int num : nums) {
        auto it = lower_bound(sub.begin(), sub.end(), num);
        if (it == sub.end()) sub.push_back(num);
        else *it = num;
    }
    return sub.size();
}

int main() {
    // Example usage
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    cout << "Max Subarray Sum: " << maxSubArray(nums) << endl;

    vector<vector<int>> matrix = {{1, 4, 7, 11},
                                  {2, 5, 8, 12},
                                  {3, 6, 9, 16}};
    cout << "Search in 2D Matrix: " << (searchMatrix(matrix, 5) ? "Found" : "Not Found") << endl;

    vector<int> beautiful = beautifulArray(10);
    cout << "Beautiful Array: ";
    for (int num : beautiful) cout << num << " ";
    cout << endl;

    vector<vector<int>> buildings = {{2, 9, 10}, {3, 7, 15}, {5, 12, 12}, {15, 20, 10}, {19, 24, 8}};
    auto skyline = getSkyline(buildings);
    cout << "Skyline: ";
    for (auto& p : skyline) cout << "[" << p[0] << "," << p[1] << "] ";
    cout << endl;

    return 0;
}
